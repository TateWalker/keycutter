#!/usr/bin/env bash
set -eu -o pipefail

# [preview] keycutter - Create FIDO SSH keys for authentication and commit signing.

KEYCUTTER_ROOT="$(readlink -f "$(dirname -- "${BASH_SOURCE[0]:-${0:A}}")/../")"
source "${KEYCUTTER_ROOT}/lib/functions"

# Set any undefined environment variables to default values
: ${KEYCUTTER_CONFIG_DIR:="${HOME}/.ssh/keycutter"}
: ${KEYCUTTER_SSH_KEY_TYPE:="ecdsa-sk"}

# Prerequisites:
#
# - Bash >= 4.0
# - GitHub CLI >= 2.0 (Greater than 2.4.0+dfsg1-2 on Ubuntu)
# - OpenSSH >= 8.2p1
# - YubiKey Manager

usage() {
    log "Usage:"
    log "       $(basename "$0") <ssh-keytag> [--email <value>] [--name <value>] [--resident] [--type <value>]"
    log
    log "Arguments:"
    log
    log "  ssh-keytag Required. Identifier for key (e.g. github.com_alex@laptop-personal)"
    log
    log "  --resident Optional. Create resident FIDO SSH key (default is non-resident)"
    log "  --type     Optional. Which cryptographic key to use (ecdsa-sk, ed25519-sk). Default is ecdsa-sk."
    log
    log "SSH Keytag format: service_user@device"
    log 
    log "  - service : Service this key is used with (e.g. 'github.com', 'aws', 'digitalocean')"
    log "  - user    : Service User this SSH Key authenticates as (e.g. 'alex')"
    log "  - device  : Device this ssh key resides on ( e.g. 'yubikey1', 'work-laptop', 'zfold5')"
}

create() {
    if [[ $# -lt 1 ]]; then
        usage
        exit 1
    fi

    # Set default values, override with command line options
    local ssh_key_resident=""
    local ssh_key_type="$KEYCUTTER_SSH_KEY_TYPE"
    local ssh_keytag=""

    while (( "$#" )); do
        case "$1" in
            --resident)
                ssh_key_resident="yes"
                shift
                ;;
            --type)
                ssh_key_type="$2"
                shift 2
                ;;
            -h|--help)
                usage
                exit 0
                ;;
            *)
                if [[ -z $ssh_keytag ]]; then
                    ssh_keytag="$1"
                else
                    log "Error: Invalid option $1"
                    usage
                    exit 1
                fi
                shift
                ;;
        esac
    done

    if [[ -z "$ssh_keytag" ]]; then
        usage
        exit 1
    fi

    local service="$(_ssh-keytag-service "$ssh_keytag")"

    # Ensure base config dir exists wth correct perms
    dir-ensure "$KEYCUTTER_CONFIG_DIR" 0700 

    local ssh_key_path="${KEYCUTTER_CONFIG_DIR}/keys/${ssh_keytag}" # Path SSH key will be written to

    # Create FIDO SSH Key for $ssh_keytag
    keycutter-ssh-key-create "$ssh_key_path" "$ssh_key_type" "$ssh_key_resident"

    # If the SSH Keytags 
    # - Upload public key to GitHub for auth and commit signing
    if [[ $service =~ github.com ]]; then
      log "Add SSH key to GitHub for auth and commit/tag signing: $ssh_key_path"
      keycutter-github-ssh-key-add "$ssh_key_path"
      local demo_message="\nYou can SSH to GitHub by running:\n\n ssh -T $(_ssh-keytag-service-identity "$ssh_key_path")\n"
    else 
        log "Skip GitHub specific setup - SSH Keytag identity part doesn't contain 'github.com'."
    fi

    log "Success! Setup complete for key: $ssh_keytag"

    if [[ -n ${demo_message:-} ]]; then
      echo -e "$demo_message" # Only for GitHub keys
    fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    create "$@"
fi
