# Keycutter SSH Config - https://github.com/bash-my-aws/keycutter

# Add this line to start of ~/.ssh/config: 
#
#     Include ~/.ssh/keycutter
#
# ...or replace it by setting shell environment variable:
#
#     SSH_CONFIG=~/.ssh/keycutter/config

# Zeroconf SSH Key selection supporting:
#
# - FIDO SSH Keys:
#   - Unstealable* SSH Keys on hardware security keys
#   - User presence confirmation
# - SSH Keytags: Convention to simplify use of multiple ssh keys.
# - ssh-agent forwarding: Remote hosts request correct key.
# - Multiple ssh-agents: Enforce security boundaries
# - SSH over SSM (AWS): Automatically copy public key to remote hosts

# Required shell Environment Variables
#
# KEYCUTTER_DEVICE: Name of local device (defaults to hostname)
# KEYCUTTER_ORIGIN: Name of device with hardware security key
#
# Add the following to your shell profile to set these variables:
#
#    # keycutter needs these to determine which SSH key to use
#    export KEYCUTTER_DEVICE="$(hostname -s)" # Name of local device (defaults to hostname)
#    [[ -z "${SSH_CONNECTION}" ]] && export KEYCUTTER_ORIGIN="${KEYCUTTER_DEVICE}"

IdentitiesOnly yes # Don't offer all public keys to remote hosts.
ForwardAgent no    # Don't offer SSH agent forwarding to all remote hosts.

# ORIGIN: Ensure ssh-agents are running, keys are added. # Copy out keycutter ssh config.
Match exec "bash -c '[[ ${KEYCUTTER_ORIGIN:-X} == ${KEYCUTTER_DEVICE:-} ]]'" OriginalHost *,!github*,!gitlab*

    PermitLocalCommand yes
    LocalCommand ~/.ssh/keycutter/scripts/ssh-agents-ensure # && scp -P %p ~/.ssh/keycutter/config %n:.ssh/keycutter/config
    # Git is probably the only thing you need ssh-agent forwarding for
    # Override this for hosts that need other keys
    IdentityAgent ~/.ssh/keycutter/agents/default/ssh-agent.socket

## ORIGIN/REMOTE: Send KEYCUTTER_ORIGIN to remote host
Match exec "bash -c '[[ $(ps h o args p $PPID | wc -w) -eq 2 ]]'" OriginalHost *,!github*,!gitlab*,!git.*

    # Using SendEnv enables KEYCUTTER_ORIGIN to be:
    #
    #   - a custom name, instead of $(hostname -s)
    #   - forwarded more than one hop, enabling multihop ssh-agent forwarding
    #
    # Note:
    #
    #   - Requires remote host sshd configured with: AcceptEnv KEYCUTTER_ORIGIN.
    #   - AcceptEnv has potential implications for security.
    #   - ProxyJump is generally better for reaching hosts via other hosts.
    #
    # Set KEYCUTTER_ORIGIN environment variable on remote host
    SendEnv KEYCUTTER_ORIGIN

# ORIGIN: Set $KEYCUTTER_ORIGIN on remote to local hostname (SendEnv fallback).
Match exec "bash -c '[[ ${KEYCUTTER_ORIGIN:-X} == ${KEYCUTTER_DEVICE:-} && $(ps h o args p $PPID | wc -w) -eq 2 ]]'" OriginalHost *,!github*,!gitlab*,!git.*

    # Fallback in case remote sshd is not configured with: AcceptEnv KEYCUTTER_ORIGIN
    # Hack to avoid breaking rsync, command line, etc: Match only applies to commands
    # with two items has two items (e.g. ssh servername).
    # Set KEYCUTTER_ORIGIN to current host's hostname (short)
    RemoteCommand "$SHELL" -c 'export KEYCUTTER_ORIGIN=${KEYCUTTER_ORIGIN:-"%L"} && mkdir -p "${k:=${HOME}/.ssh/keycutter/keys}" && (cd "$k" && ssh-add -L | awk "{filename = $3 \".pub\"; print > filename}" || true ) && exec "$SHELL" -l' 
    RequestTTY yes

# ORIGIN/NON-ORIGIN: Add private key based on remote hostname from origin host (if file exists)
Match final exec "bash -c '[[ -f ~/.ssh/keycutter/keys/%n@${KEYCUTTER_ORIGIN:-} ]]'" Host *,!i-*
    IdentityFile ~/.ssh/keycutter/keys/%n@${KEYCUTTER_ORIGIN}

# ORIGIN/NON-ORIGIN: Add private key based on remote hostname from keyring (if file exists)
Match final exec "bash -c '[[ -f ~/.ssh/keycutter/keys/%n@keyring ]]'" Host *,!i-*
    IdentityFile ~/.ssh/keycutter/keys/%n@keyring

# NON-ORIGIN: Add public key based on remote hostname from origin host (if file exists)
Match final exec "bash -c '[[ ${KEYCUTTER_ORIGIN:-X} != $KEYCUTTER_DEVICE && -f ~/.ssh/keycutter/keys/%n@${KEYCUTTER_ORIGIN}.pub ]]'" Host *,!i-*
    IdentityFile ~/.ssh/keycutter/keys/%n@${KEYCUTTER_ORIGIN}.pub

# NON-ORIGIN: Add public key based on remote hostname from keyring (if file exists)
Match final exec "bash -c '[[ ${KEYCUTTER_ORIGIN:-X} != $KEYCUTTER_DEVICE && -f ~/.ssh/keycutter/keys/%n@keyring.pub ]]'" Host *,!i-*
    IdentityFile ~/.ssh/keycutter/keys/%n@keyring.pub

# Catchall for <domain>_<username>
Host *_* 

    IdentitiesOnly yes # Don't expose random public keys to services
    # Strip the username from the hostname
    ProxyCommand nc "$(echo "%h" | sed "s/_.*$//")" %p 
    RequestTTY no

# To get around firewalls blocking port 22: Connect to `ssh.github.com:443`
Host *github.com*

    User git
    ForwardAgent no # GitHub doesn't need access to your ssh-agent
    IdentitiesOnly yes # Don't expose random public keys to GitHub.com

# SSH over SSM (AWS Systems Manager)
Match Host i-*,m-*
  User ec2-user
  ForwardAgent no
  IdentitiesOnly yes
  IdentityFile ~/.ssh/ssm-ssh-tmp
  ProxyCommand bash -c "~/.ssh/scripts/ssh-ssm %h %r"
  StrictHostKeyChecking no
  # IdentityAgent ~/.ssh/agents/github/ssh-agent.socket
  # BatchMode yes # Needed?

# Define your custom hosts here
Host *
    Include ~/.ssh/keycutter/hosts/*

# SSH over SSM (AWS Systems Manager) - Second Pass
# Set values on Hosts whose HostName value was set by an Include'd file.
Match final Host i-*,m-*
  IdentitiesOnly yes
  IdentityFile ~/.ssh/ssm-ssh-tmp
  StrictHostKeyChecking no
  # BatchMode yes

  # vim:ft=sshconfig
