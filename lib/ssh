# keycutter/lib/ssh - Functions to create SSH keys and config

KEYCUTTER_ROOT="$(readlink -f "$(dirname -- "${BASH_SOURCE[0]:-${0:A}}")/../")"
source "${KEYCUTTER_ROOT}/lib/utils"

# Initialise some environment variables

: ${KEYCUTTER_CONFIG_DIR:="${HOME}/.keycutter"}
: ${KEYCUTTER_SSH_KEY_DIR:="${KEYCUTTER_CONFIG_DIR}/ssh/keys"}
: ${KEYCUTTER_SSH_KEY_TYPE:="ecdsa-sk"}

keycutter-ssh-key-create() {

    # Generate a new FIDO SSH key

    local ssh_key_path="${1:-}"
    local ssh_key_type="${2:-${KEYCUTTER_SSH_KEY_TYPE}}"
    local resident="${3:-}"

    local ssh_keytag="$(basename "${ssh_key_path}")"        # Extract SSH Keytag from path

    if [[ -z $ssh_key_path || -z $ssh_keytag ]]; then
        usage
        return 1
    fi

    dir-ensure "$(dirname "$ssh_key_path")" 0700

    log "Generate FIDO SSH key: $ssh_key_path"
    ssh-keygen -t "$ssh_key_type" -f "$ssh_key_path" -C "$ssh_keytag"  ${resident:+-O resident} # -N "" # Uncomment for no passphrase prompt
    chmod 0600 "${ssh_key_path}.pub"

    if [[ $ssh_keytag =~ github.com* ]]; then
        read -p "Symlink key to enable ssh.github.com:443? [Y/n] " -n 1 -r
        echo
        if ! [[ $REPLY =~ ^[Nn]$ ]]; then
            log "Create symlink: ln -sf $ssh_key_path ${ssh_key_path/github.com/ssh.github.com}"
            ln -sf "$ssh_key_path" "${ssh_key_path/github.com/ssh.github.com}"
        fi
    fi
}

keycutter-ssh-config-create() {

    # Copies in keycutter/ssh/config and offers to symlink new key into default agent

    local ssh_key_path="${1}"
    [[ -z $ssh_key_path ]] && log "Error! No value provided" && return 1

    local keycutter_ssh_config_path="${KEYCUTTER_CONFIG_DIR}/ssh/config"
    local ssh_agents_dir="${KEYCUTTER_CONFIG_DIR}/ssh/agents"
    local keycutter_scripts_dir="${KEYCUTTER_CONFIG_DIR}/scripts"

    # Ensure keycutter config dir exists
    dir-ensure "${KEYCUTTER_CONFIG_DIR}" 0700

    # Copy in main keycutter ssh config
    dir-ensure "$(dirname "${keycutter_ssh_config_path}")" 0700
    apply-template "${KEYCUTTER_ROOT}/templates/ssh/config" "${keycutter_ssh_config_path}"

    # Ensure $KEYCUTTER_CONFIG_DIR/ssh/config is Include'd by ~/.ssh/config.
    prepend-line-if-missing ~/.ssh/config "Include ${keycutter_ssh_config_path/#$HOME/'~'}"

    # Copy in ssh-agents-ensure script
    dir-ensure "${keycutter_scripts_dir}" 0700
    apply-template \
        "${KEYCUTTER_ROOT}/templates/scripts/ssh-agents-ensure" \
        "${keycutter_scripts_dir}/ssh-agents-ensure" 

    # Offer to add key to config for default ssh-agent
    read -p "Add key to default keycutter ssh-agent? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        dir-ensure "${ssh_agents_dir}" 0700
        dir-ensure "${ssh_agents_dir}/default/keys" 0700
        log "Create symlink: ln -sf ${ssh_key_path} ${ssh_agents_dir}/default/keys"
        ln -sf "${ssh_key_path}" "${ssh_agents_dir}/default/keys" # XXX Prompt before overwrite
    fi
}

# sixty-ten 

## SSH Keytags - Manipulate SSH Keytags (strings) used by Keycutter

ssh-keytag-validate() {
    local keytag="$1"

    # Regular expression to match the SSH keytag format
    local regex="^([a-zA-Z0-9._-]+_)?([a-zA-Z0-9._-]+)(@[a-zA-Z0-9._-]+)?$"

    if [[ $keytag =~ $regex ]]; then
        local fqdn="${BASH_REMATCH[1]}"
        local user="${BASH_REMATCH[2]}"
        local device="${BASH_REMATCH[3]}"

        # If device is missing and $KEYCUTTER_HOSTNAME is set, use it
        if [[ -z $device && -n $KEYCUTTER_HOSTNAME ]]; then
            device="$KEYCUTTER_HOSTNAME"
        fi

        # Construct the new keytag
        if [[ -n $device ]]; then
            local new_keytag="${fqdn}${user}@${device}"
            echo "$new_keytag"
        else
            echo "Error: Device name is missing and KEYCUTTER_HOSTNAME is not set." >&2
            return 1
        fi
    else
        echo "Error: Invalid SSH keytag format." >&2
        return 1
    fi
}

_ssh-keytag-create(){
    # Generate a default SSH Keytag
    local user="${1:-$(whoami)}"
    local device="${2:-"${KEYCUTTER_HOSTNAME:-"$(hostname -s)"}"}"
    local service="${3:-}"
    echo "${service:+"${service}_"}${user}@${device}"
}

_ssh-keytag() {
    # Extract SSH Keytag from path
    echo "$(basename "${1:-}")" # Strip path if filename is provided
}

_ssh-keytag-device() {
    # Extract the Device part of the SSH Keytag
    local ssh_keytag="$(ssh-keytag "${1:-}")"
    echo "${ssh_keytag#*@}"
}

_ssh-keytag-service-identity() {
    # Extract the Service_Identity part of the SSH Keytag
    local ssh_keytag="$(_ssh-keytag "${1:-}")"
    echo "${ssh_keytag%@*}"
}

_ssh-keytag-service() {
    # Extract the Identity part of the SSH Keytag
    local ssh_keytag_service_identity="$(_ssh-keytag-service-identity "${1:-}")"
    local service="${ssh_keytag_service_identity%%_*}" # Removed longest match from end
    if [[ $service == $ssh_keytag_service_identity ]]; then
        return
    else
        echo "$service"
    fi
}

_ssh-keytag-identity() {
    # Extract the Identity part of the SSH Keytag
    local ssh_keytag_service_identity="$(_ssh-keytag-service-identity "${1:-}")"
    local identity="${ssh_keytag_service_identity#*_}" # remove shortest match from start
    echo "$identity"
}
