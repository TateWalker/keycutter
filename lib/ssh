# SSH Functions for Keycutter

_SLF_DIR="$(readlink -f "$(dirname -- "${BASH_SOURCE[0]:-${0:A}}")/../")"
source "${_SLF_DIR}/lib/utils"

# Initialise some environment variables

: ${KEYCUTTER_CONFIG_DIR:="${HOME}/.keycutter"}
: ${KEYCUTTER_SSH_CONFIGFILE:="${KEYCUTTER_CONFIG_DIR}/ssh/sshconfig-keycutter"}
: ${KEYCUTTER_SSH_KEY_DIR:="${KEYCUTTER_CONFIG_DIR}/ssh/keys"}
: ${KEYCUTTER_SSH_KEY_TYPE:="ecdsa-sk"}
: ${KEYCUTTER_SSH_USER_CONFIGFILE:="${HOME}/.ssh/config"}



## Create SSH Keys and Config

# XXX Check Security Key requires PIN to unlock
ssh-key-create() {

    # Create a new SSH Key

    # Use of generated FIDO SSH Key requires user presence verification 

    local ssh_key_path="${1:-}"
    local ssh_key_type="${2:-${KEYCUTTER_SSH_KEY_TYPE}}"
    local resident="${3:-}"
    local ssh_keytag="$(ssh-keytag "${ssh_key_path}")"        # Extract SSH Keytag from path

    if [[ -z $ssh_key_path || -z $ssh_keytag ]]; then
        usage
        return 1
    fi
    
    dir-ensure "$(dirname "$ssh_key_path")" 0700

    log "Generate FIDO SSH key: $ssh_key_path"
    ssh-keygen -t "$ssh_key_type" -f "$ssh_key_path" -C "$ssh_keytag" ${resident:+-O resident}
}

ssh-config-create() {

    # Create or update SSH configuration file for the identity

    local ssh_key_path="${1:-}"
    
    if [[ -z $ssh_key_path ]]; then
        usage # XXX This should be an error message
        return 1
    fi

    local sshconfig_keycutter_path="${KEYCUTTER_CONFIG_DIR}/ssh/sshconfig-keycutter"
    local ssh_host_alias_dir="${KEYCUTTER_CONFIG_DIR}/ssh/config.d"

    dir-ensure "${KEYCUTTER_CONFIG_DIR}" 0700

    # Ensure SSH config defining Host entries for keys are Included from Keycutter's sshconfig
    dir-ensure "$(dirname "${sshconfig_keycutter_path}")" 0700
    touch "${sshconfig_keycutter_path}"
    append-line-if-missing "${sshconfig_keycutter_path}" "Include $ssh_host_alias_dir/*"

    # Ensure sshconfig-keycutter is Included from user's sshconfig (~/.ssh/config).
    # XXX Remove: ssh-config-include "${ssh_config_keycutter_path}" 
    prepend-line-if-missing "${KEYCUTTER_SSH_USER_CONFIGFILE}" "Include ${sshconfig_keycutter_path}"

    # Add this key to Keycutter SSH config  
    #
    # If the key is for a service, create a Host entry for the service
    local service="$(ssh-keytag-service "${ssh_key_path}")"
    if [[ -n $service ]]; then
        ssh-config-host-file-update "${ssh_key_path}"
    # Otherwise, add the key to the main Keycutter SSH config
    else
        local target_path="${sshconfig_keycutter_path}"
        prepend-line-if-missing "${target_path}" "IdentityFile ${ssh_key_path}"
    fi
}

ssh-config-host-file-update() {

    local ssh_key_path="${1:-}"

    local service_identity="$(ssh-keytag-service-identity "${ssh_key_path}")"
    local service="$(ssh-keytag-service "${ssh_key_path}")"
    local ssh_host_alias_path="${KEYCUTTER_CONFIG_DIR}/ssh/config.d/${service_identity}"

    dir-ensure "$(dirname "${ssh_host_alias_path}")" 0700

    temp_file="$(mktemp)"
    # If we already have a config file for this identity
    if [[ -f $ssh_host_alias_path ]]; then
        log "SSH configuration file exists ($ssh_host_alias_path)"
        # If the ssh_key_path is not already in the file, add it
        local identityfile_entry="  IdentityFile $ssh_key_path"
        if ! grep -qxF "$identityfile_entry" "$ssh_host_alias_path"; then
            log "Appending '$identityfile_entry' to $ssh_host_alias_path"
            echo "$identityfile_entry" >> "$ssh_host_alias_path"
        else
            log "IdentityFile $ssh_key_path already in $ssh_host_alias_path"
        fi
    else
        log "Create SSH configuration file $ssh_host_alias_path"
        cat > "$temp_file" <<-EOF
Host $service_identity
  User git # Change to the user for the service
  HostName $service
  IdentitiesOnly yes
  IdentityFile $ssh_key_path
EOF
        mv "$temp_file" "$ssh_host_alias_path"
    fi

}

## List SSH Keys

ssh-keys-fido-resident(){
  log "Resident FIDO SSH Keys:"
  ssh-keygen -K
}

ssh-keys-fido-non-resident(){
  local ssh_key_dir="${KEYCUTTER_SSH_KEY_DIR:-"${KEYCUTTER_CONFIG_DIR}/ssh/keys"}"
  log >&2 "Non-resident FIDO SSH Keys:"
  grep -l "sk-" "$ssh_key_dir"/*.pub
}

ssh-keys-fido() {
  ssh-keys-fido-non-resident  
  ssh-keys-fido-resident  
}

## SSH Keytags - Manipulate SSH Keytags (strings) used by Keycutter

ssh-keytag-create(){
    # Generate a default SSH Keytag
    local user="${1:-$(whoami)}"
    local device="${2:-$(hostname)}"
    local service="${3:-}"
    echo "${service:+"${service}_"}${user}@${device}"
}

ssh-keytag() {
    # Extract SSH Keytag from path
    echo "$(basename "${1:-}")" # Strip path if filename is provided
}

ssh-keytag-device() {
    # Extract the Device part of the SSH Keytag
    local ssh_keytag="$(ssh-keytag "${1:-}")"
    echo "${ssh_keytag#*@}"
}

ssh-keytag-service-identity() {
    # Extract the Service_Identity part of the SSH Keytag
    local ssh_keytag="$(ssh-keytag "${1:-}")"
    echo "${ssh_keytag%@*}"
}

ssh-keytag-service() {
    # Extract the Identity part of the SSH Keytag
    local ssh_keytag_service_identity="$(ssh-keytag-service-identity "${1:-}")"
    local service="${ssh_keytag_service_identity%%_*}" # Removed longest match from end
    if [[ $service == $ssh_keytag_service_identity ]]; then
        return
    else
        echo "$service"
    fi
}

ssh-keytag-identity() {
    # Extract the Identity part of the SSH Keytag
    local ssh_keytag_service_identity="$(ssh-keytag-service-identity "${1:-}")"
    local identity="${ssh_keytag_service_identity#*_}" # remove shortest match from start
    echo "$identity"
}
