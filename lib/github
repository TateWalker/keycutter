# GitHub Functions

keycutter-github-ssh-key-add() {
    local ssh_key_path="$1"

    if [[ -z "$ssh_key_path" ]]; then 
        log "Error: ssh_key_path is required."
        return 1
    fi
    
    # Ensure the path ends with .pub
    if [[ ! "$ssh_key_path" =~ \.pub$ ]]; then
        log "Error: The provided key path must end with .pub to ensure only public keys are uploaded."
        return 1
    fi

    # Check if the file exists
    if [[ ! -f "$ssh_key_path" ]]; then
        log "Error: The specified public key file does not exist: $ssh_key_path"
        return 1
    fi

    # Validate the content of the file
    if ! ssh-keygen -lf "$ssh_key_path" &>/dev/null; then
        log "Error: The specified file does not appear to be a valid public key: $ssh_key_path"
        return 1
    fi

    local ssh_keytag="$(basename "${ssh_key_path}" .pub)"

    read -p "Upload public key to GitHub for auth and commit signing using Github CLI? (Y/n) " choice
    choice=${choice:-Y}
    [[ $choice =~ ^[Yy]*$ ]] || return 1

    log "Tip: You can authorise GitHub CLI from a trusted device by visiting https://github.com/login/device"

    if github-auth; then
        log "Add SSH authentication key ($ssh_key_path) to GitHub"
        if ! gh ssh-key add --type authentication --title "${ssh_keytag}" "$ssh_key_path"; then
            log "Error: Failed to add authentication key to GitHub"
            return 1
        fi

        log "Add SSH signing key ($ssh_key_path) to GitHub"
        if ! gh ssh-key add --type signing --title "${ssh_keytag}" "$ssh_key_path"; then
            log "Error: Failed to add signing key to GitHub"
            return 1
        fi

        log
        log "Note: GitHub Organisations that enable or enforce SAML SSO will require additional setup."
    else
        log "Error: Not uploading key to GitHub (not authenticated)"
        return 1
    fi
}


github-auth() {

    # Ensure user is logged in to GitHub with required scopes

    # Show GitHub login status
    gh auth status 2>&1 | grep 'Logged in to github.com as' >&2
    # Give user a chance to login or re-login as a different user
    gh auth login \
      --web \
      --git-protocol https \
      --scopes admin:public_key,admin:ssh_signing_key

    local gh_auth_token_scopes
    # If user is authenticated to GitHub
    if gh_auth_token_scopes=$(gh auth status | grep scopes); then 
      if [[ $gh_auth_token_scopes =~ 'admin:public_key' ]] && [[ $gh_auth_token_scopes =~ 'admin:ssh_signing_key' ]] ; then
        log >&2 "GitHub CLI: Required scopes are available."
      else
        log >&2 "GitHub CLI: Necessary scopes are not available. Requesting additional scopes..."
        gh auth refresh -h github.com -s admin:public_key,admin:ssh_signing_key
      fi
    fi
}

github-ssh-keys() {
  github-auth
  gh ssh-key list
}

github-ssh-keys-authentication() {
  github-ssh-keys | grep authentication
}

github-ssh-keys-signing() {
  github-ssh-keys | grep signing
}
