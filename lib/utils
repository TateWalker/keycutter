# utils - Functions used by SSH Keycutter
#
# - append-line-if-missing(): Append line to file if it does not exist
# - prepend-line-if-missing(): Prepend line to file if it does not exist
# - add-line-if-missing(): Append or prepend line to file if it does not exist
# - dir-ensure(): Ensure directory exists with correct permissions
# - log(): Write colorized messages to stdout or stderr

append-line-if-missing() {
    add-line-if-missing append "$@"
}

prepend-line-if-missing() {
    add-line-if-missing prepend "$@"
}

add-line-if-missing() {
    local mode="${1:-append}"
    local target_file="${2}"
    local line_to_add="${3}"
    local backup_extension="${4:-".backup.$(date +%s)"}"

    # Check if target file exists
    if [[ ! -f $target_file ]]; then
      log "Error! File not found '$target_file'"
      ls "$target_file"
      return 1
    fi

    # Check if the line is already in the file to avoid duplicates
    if ! grep -qxF "$line_to_add" "$target_file"; then
        log "Adding line to $target_file in $mode mode."
        case "$mode" in
            append)
                # Append the line
                log "Appending line to $target_file"
                cp "$target_file" "$target_file$backup_extension"
                echo "$line_to_add" >> "$target_file"
                ;;
            prepend)
                # Prepend the line
                log "Prepending line to $target_file"
                if [[ ! -s "$target_file" ]]; then
                    echo "$line_to_add" > "$target_file"
                else
                    sed -i"$backup_extension" "1i$line_to_add" "$target_file"
                fi
                ;;
            *)
                echo "Invalid mode specified. Use 'prepend' or 'append'."
                return 1
                ;;
        esac
        log "Backup of original file created with extension: $backup_extension"
    else
        log "Line already present in $target_file"
    fi
}

# Ensure directory exists with correct permissions
dir-ensure() {
    local dir_path="${1:?}"
    local permissions="${2:-}"

    if [[ $# == 0 ]]; then
        echo "Usage: dir-ensure <dir_path> [<permissions>]"
        return 1
    fi

    # Check if the dir_path exists in any form (file, directory, symlink, etc.)
    if [[ -e "$dir_path" || -L "$dir_path" ]]; then
        # If the path is not a directory, return an error.
        if [[ ! -d "$dir_path" ]]; then
            log "Error: The path '$dir_path' exists but is not a directory."
            return 1
        fi
    fi

    if [[ ! -d "$dir_path" ]]; then
        log "Create directory '$dir_path' ${permissions:+"with permissions '$permissions'"}."
        install -d ${permissions:+"-m$permissions"} "$dir_path"
    elif [[ -n "$permissions" ]]; then
        local current_permissions
        current_permissions=$(ls -ld "$dir_path" | awk '{print $1}')
        
        install -d -m "$permissions" "$dir_path"
        local new_permissions
        new_permissions=$(ls -ld "$dir_path" | awk '{print $1}')
        
        if [[ "$current_permissions" != "$new_permissions" ]]; then
            log "Modify Directory permissions: $dir_path"
        else
            log "DEBUG : No changes required to $dir_path"
        fi
    else
        log "DEBUG : No changes required to $dir_path"
    fi
}

file-ensure() {
    local file_path="${1:?}"
    local permissions="${2:-}"
    dir-ensure "$(dirname "${file_path}")" "$permissions"
    touch "${file_path}"
    if [[ -n "$permissions" ]]; then
        # XXX Check whether permissions actually need changing
        log "Ensuring file permissions for '$file_path' are '$permissions'."
        chmod "$permissions" "${file_path}"
    fi
}

apply-template() {
    # Install file from template if it does not exist
    # if the file exists:
    # if it is identical, print a message to that effect
    # if it is different, show the diff and ask user if they want to overwrite
    local template_path="${1:-}"
    local target_path="${2:-}"
    if [[ -f $target_path ]]; then
        if diff -q "$target_path" "$template_path" >/dev/null; then
            log "File is identical: $target_path $template_path"
        else
            log "File is different: $target_path"
            command diff "$target_path" "$template_path" || true
            read -p "Overwrite? [y/N] " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                log "Overwriting $target_path"
                cp "$template_path" "$target_path"
            fi
        fi
    else
        log "Installing $target_path"
        cp "$template_path" "$target_path"
    fi
}

# Write colorized messages to stdout or stderr
log() {
    local message="$*"
    local first_word_downcased=$(echo "$message" | awk '{print tolower($1)}' | sed 's/[[:punct:]]*$//')

    if [[ "$first_word_downcased" == "debug" && -z ${DEBUG:-} ]]; then
        return
    fi

    local destination='stdout'
    local prefix

    # Color code assignments by color names
    local blue="\033[0;34m"
    local yellow="\033[0;33m"
    local red="\033[0;31m"
    local cyan="\033[0;36m"
    local green="\033[0;32m"
    local magenta="\033[1;35m"
    local orange="\033[38;5;208m"
    local reset="\033[0m"

    # Default colour
    local color="$reset"

    # Define color and prefix based on action type
    case $first_word_downcased in
        info|tip)             color="$blue";    prefix="️🛈 " ; destination='stderr';;
        warn|note)            color="$yellow";  prefix="⚠️ "; destination='stderr';;
        error)                color="$red";     prefix="🚫 " ;;
        debug)                color="$cyan";    prefix="🔍 " ;;
        success)              color="$green";   prefix="✅ " ;;
        prompt)               color="$magenta"; prefix="❓ " ;;
        add|create|generate)  color="$orange";  prefix="➕ " ;;
        append|prepend)       color="$orange";  prefix="➕ " ;;
        change|modify|update) color="$orange";  prefix="🔄 " ;;
        configure)            color="$orange";  prefix="🔄 " ;;
        delete|remove|rm)     color="$orange";  prefix="➖ " ;;
        start)                color="$orange";  prefix="▶️  " ;;
        stop)                 color="$orange";  prefix="⏹️ " ;;
        restart|reload)       color="$orange";  prefix="🔁 " ;;
        *)                    color="$reset";   prefix="" ;;
    esac

    # Check for NO_COLOR or if output is not a terminal
    if [[ -n ${NO_COLOR:-} ]] || [[ ! -t 1 ]]; then
        # Check if destination is STDERR
        if [[ $destination == 'stderr' ]]; then
            >&2 printf "%s%s\n" "$prefix" "$message"
        else
            printf "%s%s\n" "$prefix" "$message"
        fi
    else
        # Check if destination is STDERR
        if [[ $destination == 'stderr' ]]; then
            >&2 printf "%b%s%s%b\n" "$color" "$prefix" "$message" "$reset"
        else
            printf "%b%s%s%b\n" "$color" "$prefix" "$message" "$reset"
        fi
    fi
}
