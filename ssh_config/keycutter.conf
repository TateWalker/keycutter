# Keycutter SSH Config - https://github.com/bash-my-aws/keycutter/config

# SSH Config for improved SSH Key security supporting:
#
# - SSH Keytags naming convention: e.g. github.com_mbailey@work
# - SSH Key Privacy: Define which keys to offer to remote hosts.
# - SSH Agent Profiles: Define which keys to forward to different remote hosts.
# - SSH over SSM: Automatically copy public SSH key to AWS EC2 remote hosts.
# - Support for multiple service accounts (e.g. GitHub.com)
#
# Add the following to your shell profile to set required variable:
#
#    # keycutter uses this to determine which SSH key to use
#    [[ -z "${SSH_CONNECTION}" ]] && export KEYCUTTER_ORIGIN="$(hostname -s)"

# Load custom rules for hosts (that override or append to directives below).
Include keycutter/hosts/*

# ORIGIN/NON-ORIGIN: Set $KEYCUTTER_ORIGIN on remote host and start $SHELL
Match final exec "bash -c '[[ $(ps -o args= -p $PPID) =~ ^ssh[[:space:]]+((-[^T ]+[[:space:]]+)*[^-][^ ]*)?$ ]]'"

  # Using SendEnv enables KEYCUTTER_ORIGIN to be:
  #
  #   - a custom name, instead of $(hostname -s)
  #   - forwarded more than one hop, enabling multihop ssh-agent forwarding
  #
  # Note:
  #
  #   - Ignored unless remote sshd configured to AcceptEnv KEYCUTTER_ORIGIN.
  #   - AcceptEnv has potential implications for security.
  #   - ProxyJump is usually a better alternative to ssh agent forwarding.
  #
  # Send $KEYCUTTER_ORIGIN environment variable to remote host
  SendEnv KEYCUTTER_ORIGIN

  # Set some defaults (if not already set)
  IdentitiesOnly yes # Don't offer all public keys to remote hosts.
  ForwardAgent no    # Don't offer SSH agent forwarding to all remote hosts.
  RequestTTY yes

  # Fallback for when sshd on remote host doesn't AcceptEnv KEYCUTTER_ORIGIN
  # Sets $KEYCUTTER_ORIGIN on remote to origin hostname (%L) if not defined.
  # RemoteCommand does not interpret environment variables.
  RemoteCommand bash -c 'export KEYCUTTER_ORIGIN=${KEYCUTTER_ORIGIN:-"%L"} && (mkdir -p ~/.ssh/keycutter/keys && cd ~/.ssh/keycutter/keys && ssh-add -L | while read -r type key comment; do echo "$type $key $comment" > "${comment##*/}.pub"; done || true) && exec "$SHELL" -l'

# ORIGIN: Ensure ssh-agents are running, keys are added.
Match final exec "bash -c '[[ -z $SSH_CONNECTION && $(ps -o args= -p $PPID) =~ ^ssh[[:space:]]+((-[^T ]+[[:space:]]+)*[^-][^ ]*)?$ ]]'"

  # Git is probably the only thing you need ssh-agent forwarding for
  # Override this for hosts that need other keys
  IdentityAgent ~/.ssh/keycutter/agents/default/ssh-agent.socket
  PermitLocalCommand yes
  LocalCommand bash -c 'IDENTITY_AGENT=$(ssh -G %h | awk "/^identityagent / {print \$2}"); ~/.ssh/keycutter/scripts/ssh-agent-ensure "$IDENTITY_AGENT"'

# Catchall for <domain>_<username>
Host *_* 

  IdentitiesOnly yes # Don't expose random public keys to services
  ProxyCommand nc "$(echo "%h" | sed "s/_.*$//")" %p # Strip user from HostName

Host *github.com*

  User git
  ForwardAgent no    # GitHub doesn't need access to your ssh-agent.
  IdentitiesOnly yes # Don't expose random public keys to GitHub.com.
  RequestTTY no      # GitHub does not (intentionally) provide shell access.
  # GitHub's solution to firewalls blocking SSH port 22
  # HostName ssh.github.com 
  # Port 443

# SSH over SSM (AWS Systems Manager)
Match Host i-*,m-*

  User ec2-user
  ForwardAgent no
  IdentitiesOnly yes
  IdentityFile ~/.ssh/keycutter/keys/ssm-ssh-tmp-key
  ProxyCommand bash -c "~/.ssh/keycutter/scripts/ssh-ssm %h %r"
  StrictHostKeyChecking no
  BatchMode yes
  TCPKeepAlive yes
  ServerAliveInterval 30
  ConnectTimeout 10
  # IdentityAgent ~/.ssh/agents/github/ssh-agent.socket

# Add SSH key (if it exists) based on:
#   - Remote hostname (after any changes made by other entries)
#   - Whether we're connecting from an ORIGIN or not
#
# ORIGIN: Add private key (if file exists) based on remote hostname.
Match final exec "bash -c '[[ -z $SSH_CONNECTION && -f ~/.ssh/keycutter/keys/%n@${KEYCUTTER_ORIGIN} ]]'" 
  IdentityFile ~/.ssh/keycutter/keys/%n@${KEYCUTTER_ORIGIN}
#
# NON-ORIGIN: Add public key (if file exists) based on remote hostname.
Match final exec "bash -c '[[ -n $SSH_CONNECTION && -f ~/.ssh/keycutter/keys/%n@${KEYCUTTER_ORIGIN}.pub ]]'" 
  IdentityFile ~/.ssh/keycutter/keys/%n@${KEYCUTTER_ORIGIN}.pub

# vim:ft=sshconfig
